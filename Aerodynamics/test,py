import numpy as np
import matplotlib.pyplot as plt
def P_n_y (N,y):
    A,B,C,D,E,F,G = 0,0,0,0,0,0,1#-6.566, 27.609, -44.472, 34.027, -12.528, 1.9309, -0.0835+1 
    val = 0
    if N == 0:
        n =6
        val = A*y**6 + B*y**5 + C*y**4 + D*y**3 + E*y**2 + F*y + G
    else:
        n = 6 + N
        val = A/n*y**n + B/(n-1)*y**(n-1) + C/(n-2)*y**(n-2) + D/(n-3)*y**(n-3) + E/(n-4)*y**(n-4) + F/(n-5)*y*(n-5) + G/(n-6)*y**(n-6)
    return val

A,B,C,D,E,F,G =-6.566, 27.609, -44.472, 34.027, -12.528, 1.9309, 0.9165
ys = np.arange(0,1.5,0.01)
x = [A*y**6 + B*y**5 + C*y**4 + D*y**3 + E*y**2 + F*y + G for y in ys]
plt.plot(ys,x)
plt.show()

# # lst1 = [[3,2],[3,4],[1,6]]
# # lst = np.array(lst1)

# # min = np.amin(lst[:,0])
# # val =np.where(lst[:, 0] == min)

# # # print (val[0][0])


# b_s_local = 0.2
# alpha_cl0 = 0
# c_r_local = 2

# alpha_tip = 0.5
# b_w2 = 2

# c_p = 1

# L_total_req = 100
# L_plasma = 0

# rho = 1.225
# cl_alpha_w = 0.1

# V = 15


# twist_rate = (L_total_req /(rho * V **2 * cl_alpha_w) +(alpha_cl0 - alpha_tip)*(c_r_local*P_n_y(1,b_w2) + (c_p-c_r_local)/b_w2 * (P_n_y(2,b_w2)- P_n_y(2,b_s_local))))/(c_r_local*b_w2*P_n_y(1,b_w2) - c_r_local * P_n_y(2,b_w2) + (c_p -c_r_local) * (P_n_y(2,b_w2)-P_n_y(2,b_s_local))-(c_p-c_r_local)/b_w2 * (P_n_y(3,b_w2)-P_n_y(3,b_s_local)))
# print(twist_rate)
# twist_rate = (L_total_req / (rho * V**2 * cl_alpha_w) + (alpha_cl0 - alpha_tip) * (c_r_local*P_n_y(1,b_w2) + (c_p - c_r_local)/b_w2 * (P_n_y (2,b_w2) - P_n_y(2,b_s_local))))/(c_r_local*b_w2*P_n_y(1,b_w2) - c_r_local * P_n_y(2,b_w2) + (c_p - c_r_local) * (P_n_y(2,b_w2) - P_n_y(2,b_s_local)) - (c_p - c_r_local)/b_w2 * (P_n_y(3,b_w2) - P_n_y(3, b_s_local)))

# print(twist_rate)

# print(P_n_y (3,b_w2))
# print (b_w2**3/3)
